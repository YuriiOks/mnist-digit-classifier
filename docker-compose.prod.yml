# Production Docker Compose Configuration
services:
  db:
    image: postgres:17
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Mount init script read-only for security
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    environment:
      # Use secrets from .env file
      POSTGRES_PASSWORD: ${DB_PASSWORD?Variable DB_PASSWORD not set}
      POSTGRES_USER: ${DB_USER?Variable DB_USER not set}
      POSTGRES_DB: ${DB_NAME?Variable DB_NAME not set}
    restart: always
    # Security: Consider network restrictions if needed

  model:
    build:
      context: ./model
      dockerfile: Dockerfile
    # No volumes for production - use code baked into image
    environment:
      PORT: 5000 # Internal port Gunicorn binds to
      PYTHONUNBUFFERED: 1
      FLASK_DEBUG: 0
      PYTHONPATH: /app # <-- Explicitly set PYTHONPATH
      # Add other production-specific ENV VARS if needed
    restart: always

  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    ports:
      # Map host port (default 8501, override with WEB_PORT) to container 8501
      - "${WEB_PORT:-8501}:8501"
    depends_on:
      - model
      - db
    environment:
      # Use service names for inter-container communication
      MODEL_URL: http://model:5000
      DB_HOST: db
      # Use secrets from .env file
      DB_USER: ${DB_USER?Variable DB_USER not set}
      DB_PASSWORD: ${DB_PASSWORD?Variable DB_PASSWORD not set}
      DB_NAME: ${DB_NAME?Variable DB_NAME not set}
      PYTHONUNBUFFERED: 1
      STREAMLIT_SERVER_ENABLE_CORS: "false"
      # Production Streamlit settings (optional)
      # STREAMLIT_SERVER_HEADLESS: "true"
    restart: always

volumes:
  postgres_data: # Defines the named volume for persistent DB data